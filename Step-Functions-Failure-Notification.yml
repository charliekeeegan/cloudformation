AWSTemplateFormatVersion: 2010-09-09
Description: This template sends an SNS notification if any of the statemachines in an account fail
Parameters:
  EmailSubscriptionAddress:
    Type: String
    Default: aws-dash@amazon.com
    Description: The email address you want to subscribe to the topic

  KMSKeyAdministratorRoleARN:
    Type: String
    Default: arn:aws:iam::815423538953:role/admin
    Description: The ARN of the role that you want to administer the SNS Topic KMS Key

Resources: 
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Step Function Failures
      KmsMasterKeyId: !Ref SNSKMSKey
      Subscription: 
        - Endpoint: !Ref EmailSubscriptionAddress
          Protocol: email
        - Endpoint: !Ref SlackNotificationsLambda
          Protocol: lambda
      TopicName: Stepfunction-failures-topic

  SNSKMSKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: KMS key to protect SNS topics
      Enabled: true
      EnableKeyRotation: true
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 7
      KeyPolicy:
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Ref KMSKeyAdministratorRoleARN
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow Customisation Lambda to use Key 
            Effect: Allow
            Principal: 
              AWS: !GetAtt LambdaRole.Arn
            Action: 
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey
            Resource: '*'

  EventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule"
      EventPattern:
        source: 
          - "aws.states"
        detail-type: 
          - "Step Functions Execution Status Change"
        detail: 
          status: #alternates are RUNNING and SUCCEEDED
            - "FAILED"
            - "TIMED_OUT"
      State: ENABLED
      Targets: 
        - Arn: !GetAtt SNSCustomisationLambda.Arn
          Id: '1'
          
  EventTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - events.amazonaws.com
                - lambda.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref SNSTopic

  SNSCustomisationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to customise SNS notifications 
      Code:
        ZipFile: !Sub 
        - |
          import boto3
          def handler(event, context):
              print(event)
              state_machine_arn = event['detail']['stateMachineArn']
              state_machine_name = state_machine_arn[state_machine_arn.rfind(':')+1:]
              subject = f"{state_machine_name} has failed"
              message = f"Failure CloudWatch Event:\n{event}"

              client = boto3.client('sns')
              response = client.publish(
                  TargetArn="${SNSTopic}",
                  Message=message,
                  MessageStructure='text',
                  Subject=subject,
              )
        - {SNSTopic: !Ref SNSTopic}

      FunctionName: SNS-Customistion-Lambda-Function
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Handler: index.handler
      Timeout: 7 #seconds

  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: 
          - logs:*
          Resource: '*'
        - Effect: Allow
          Action: 'sns:Publish'
          Resource: !Ref SNSTopic
      PolicyName: SNS-Customisation-Lambda-Policy
      Roles: 
        - !Ref LambdaRole

  CloudWatchInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref SNSCustomisationLambda
      Principal: events.amazonaws.com
      # SourceArn: !Ref EventTopicPolicy

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SNS-Customisation-Lambda-Role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SlackNotificationsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to post failure notifications to Slack channel 
      Code:
        ZipFile: !Sub 
        - |
          #!/usr/bin/python3.6
          import urllib3
          import json
          http = urllib3.PoolManager()
          def lambda_handler(event, context):
              url = "https://hooks.slack.com/workflows/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"
              msg = {
                  "channel": "#aws-dash",
                  "username": "WEBHOOK_USERNAME",
                  "text": event['Records'][0]['Sns']['Message'],
                  "icon_emoji": ""
              }
              
              encoded_msg = json.dumps(msg).encode('utf-8')
              resp = http.request('POST',url, body=encoded_msg)
              print({
                  "message": event['Records'][0]['Sns']['Message'], 
                  "status_code": resp.status, 
                  "response": resp.data
              })

      FunctionName: Slack-Notifications-Lambda-Function
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.6
      Handler: index.handler
      Timeout: 7 #seconds